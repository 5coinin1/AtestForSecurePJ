import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter import simpledialog
import pyperclip
import requests
import sys
import io
import os

import threading
from PIL import Image
from dotenv import load_dotenv
import customtkinter as ctk
from cryptography.hazmat.primitives import serialization
from encryption_utils import encrypt_file, decrypt_file, generate_key_pair, save_private_key, save_public_key

# Thay ƒë·ªïi m√£ h√≥a ƒë·∫ßu ra c·ªßa stdout th√†nh utf-8
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

load_dotenv()  # T·∫£i c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env

# URL c·ªßa server Flask (ph·∫£i thay ƒë·ªïi n·∫øu s·ª≠ d·ª•ng server kh√°c)
UPLOAD_URL = os.environ.get("UPLOAD_URL")
DOWNLOAD_URL = os.environ.get("DOWNLOAD_URL")

# H√†m t·∫£i public key t·ª´ d·ªØ li·ªáu
def load_public_key(public_key_pem: bytes):
    return serialization.load_pem_public_key(public_key_pem, backend=None)

def custom_showinfo(title, message, icon="info"):
    """Hi·ªÉn th·ªã h·ªôp tho·∫°i th√¥ng b√°o v·ªõi UI ƒë·∫πp, hi·ªáu ·ª©ng ƒë·ªông."""
    dialog = ctk.CTkToplevel()
    dialog.title(title)
    dialog.geometry("450x250")
    dialog.resizable(False, False)
    dialog.configure(fg_color="#2C2F33")  # M√†u n·ªÅn t·ªëi hi·ªán ƒë·∫°i
    dialog.attributes("-alpha", 0)  # B·∫Øt ƒë·∫ßu v·ªõi hi·ªáu ·ª©ng fade-in

    # Bi·ªÉu t∆∞·ª£ng cho th√¥ng b√°o
    icons = {
        "info": "üõà",   # Th√¥ng tin
        "success": "‚úî", # Th√†nh c√¥ng
        "error": "‚úñ",   # L·ªói
        "warning": "‚ö†"  # C·∫£nh b√°o
    }
    icon_text = icons.get(icon, "üõà")

    # Hi·ªÉn th·ªã icon v√† ti√™u ƒë·ªÅ
    frame = ctk.CTkFrame(dialog, fg_color="#23272A", corner_radius=10)
    frame.pack(fill="both", expand=True, padx=20, pady=20)

    icon_label = ctk.CTkLabel(frame, text=icon_text, font=("Arial", 36), text_color="#FFD700")
    icon_label.pack(pady=(10, 5))

    label = ctk.CTkLabel(frame, text=message, font=("Arial", 14), wraplength=400, justify="center")
    label.pack(pady=10, padx=20)

    # N√∫t OK v·ªõi hi·ªáu ·ª©ng hover
    def on_hover(event):
        button.configure(fg_color="#1E90FF")

    def on_leave(event):
        button.configure(fg_color="#5865F2")

    button = ctk.CTkButton(frame, text="OK", font=("Arial", 14, "bold"), corner_radius=20, 
                           fg_color="#5865F2", text_color="white", hover_color="#1E90FF",
                           command=dialog.destroy)
    button.pack(pady=15)
    button.bind("<Enter>", on_hover)
    button.bind("<Leave>", on_leave)

    # Hi·ªáu ·ª©ng fade-in
    for i in range(0, 11):
        dialog.attributes("-alpha", i / 10)
        dialog.update_idletasks()
        dialog.after(30)

    dialog.grab_set()
    dialog.wait_window()

def custom_showerror(title, message):
    """Hi·ªÉn th·ªã h·ªôp tho·∫°i l·ªói (Error) v·ªõi UI ƒë·∫πp, hi·ªáu ·ª©ng ƒë·ªông."""
    dialog = ctk.CTkToplevel()
    dialog.title(title)
    dialog.geometry("450x250")
    dialog.resizable(False, False)
    dialog.configure(fg_color="#2C2F33")  # M√†u n·ªÅn t·ªëi
    dialog.attributes("-alpha", 0)  # B·∫Øt ƒë·∫ßu v·ªõi hi·ªáu ·ª©ng fade-in

    # Khung ch·ª©a n·ªôi dung
    frame = ctk.CTkFrame(dialog, fg_color="#23272A", corner_radius=10)
    frame.pack(fill="both", expand=True, padx=20, pady=20)

    # Bi·ªÉu t∆∞·ª£ng l·ªói (m√†u ƒë·ªè)
    icon_label = ctk.CTkLabel(frame, text="‚úñ", font=("Arial", 36), text_color="red")
    icon_label.pack(pady=(10, 5))

    # N·ªôi dung l·ªói
    label = ctk.CTkLabel(frame, text=message, font=("Arial", 14), wraplength=400, justify="center", text_color="white")
    label.pack(pady=10, padx=20)

    # N√∫t OK v·ªõi hi·ªáu ·ª©ng hover
    def on_hover(event):
        button.configure(fg_color="#FF6347")  # ƒê·ªïi sang m√†u cam ƒë·ªè

    def on_leave(event):
        button.configure(fg_color="#FF0000")  # Quay l·∫°i m√†u ƒë·ªè

    button = ctk.CTkButton(frame, text="OK", font=("Arial", 14, "bold"), corner_radius=20, 
                           fg_color="#FF0000", text_color="white", hover_color="#FF6347",
                           command=dialog.destroy)
    button.pack(pady=15)
    button.bind("<Enter>", on_hover)
    button.bind("<Leave>", on_leave)

    # Hi·ªáu ·ª©ng fade-in
    for i in range(0, 11):
        dialog.attributes("-alpha", i / 10)
        dialog.update_idletasks()
        dialog.after(30)

    dialog.grab_set()
    dialog.wait_window()

def custom_askstring(title, prompt):
    """Hi·ªÉn th·ªã h·ªôp tho·∫°i nh·∫≠p chu·ªói v·ªõi giao di·ªán ƒë·∫πp v√† hi·ªáu ·ª©ng ƒë·ªông."""
    dialog = ctk.CTkToplevel()
    dialog.title(title)
    dialog.geometry("450x250")
    dialog.resizable(False, False)
    dialog.configure(fg_color="#2C2F33")  # M√†u n·ªÅn t·ªëi
    dialog.attributes("-alpha", 0)  # B·∫Øt ƒë·∫ßu v·ªõi hi·ªáu ·ª©ng fade-in

    # Khung ch·ª©a n·ªôi dung
    frame = ctk.CTkFrame(dialog, fg_color="#23272A", corner_radius=10)
    frame.pack(fill="both", expand=True, padx=20, pady=20)

    # Ti√™u ƒë·ªÅ
    label = ctk.CTkLabel(frame, text=prompt, font=("Arial", 14), text_color="white", wraplength=400, justify="center")
    label.pack(pady=15, padx=20)

    # √î nh·∫≠p li·ªáu v·ªõi placeholder
    entry = ctk.CTkEntry(frame, font=("Arial", 14), width=350, corner_radius=8, placeholder_text="Nh·∫≠p v√†o ƒë√¢y...")
    entry.pack(pady=5, padx=20)

    result = {"value": None}

    # X·ª≠ l√Ω khi nh·∫•n OK
    def on_ok():
        result["value"] = entry.get()
        dialog.destroy()

    # X·ª≠ l√Ω khi nh·∫•n Cancel
    def on_cancel():
        result["value"] = None
        dialog.destroy()

    # N√∫t OK & Cancel v·ªõi hi·ªáu ·ª©ng hover
    button_frame = ctk.CTkFrame(frame, fg_color="transparent")
    button_frame.pack(pady=15)

    ok_button = ctk.CTkButton(button_frame, text="OK", font=("Arial", 14, "bold"), corner_radius=20,
                              fg_color="#008CBA", hover_color="#0073A8", text_color="white", command=on_ok)
    ok_button.pack(side="left", padx=10)

    cancel_button = ctk.CTkButton(button_frame, text="Cancel", font=("Arial", 14), corner_radius=20,
                                  fg_color="#FF4C4C", hover_color="#D43F3F", text_color="white", command=on_cancel)
    cancel_button.pack(side="right", padx=10)

    # Nh·∫•n Enter ƒë·ªÉ x√°c nh·∫≠n
    entry.bind("<Return>", lambda event: on_ok())

    # Hi·ªáu ·ª©ng fade-in
    for i in range(0, 11):
        dialog.attributes("-alpha", i / 10)
        dialog.update_idletasks()
        dialog.after(30)

    entry.focus()  # T·ª± ƒë·ªông focus v√†o √¥ nh·∫≠p li·ªáu
    dialog.grab_set()
    dialog.wait_window()
    return result["value"]

def upload_file():
    """T·∫£i l√™n file ƒë√£ m√£ h√≥a l√™n server."""
    # S·ª≠ d·ª•ng h·ªôp tho·∫°i tu·ª≥ ch·ªânh ƒë·ªÉ th√¥ng b√°o cho ng∆∞·ªùi d√πng
    custom_showinfo("Ch·ªçn File", "Vui l√≤ng ch·ªçn file ƒë·ªÉ t·∫£i l√™n.")
    file_path = filedialog.askopenfilename(title="Ch·ªçn file ƒë·ªÉ t·∫£i l√™n")
    if not file_path:
        custom_showerror("L·ªói", "B·∫°n ch∆∞a ch·ªçn file!")
        return

    custom_showinfo("Ch·ªçn Public Key", "Vui l√≤ng ch·ªçn file public key.")
    public_key_path = filedialog.askopenfilename(title="Ch·ªçn file public key")
    if not public_key_path:
        custom_showerror("L·ªói", "B·∫°n ch∆∞a ch·ªçn file public key!")
        return

    try:
        # ƒê·ªçc public key t·ª´ file
        with open(public_key_path, 'rb') as pub_key_file:
            public_key_pem = pub_key_file.read()
            public_key = load_public_key(public_key_pem)

        # T·∫°o t√™n file m√£ h√≥a
        encrypted_file_path = file_path + '.enc'

        # M√£ h√≥a file tr∆∞·ªõc khi t·∫£i l√™n
        encrypt_file(file_path=file_path, public_key=public_key, output_path=encrypted_file_path)

        # G·ª≠i file ƒë√£ m√£ h√≥a l√™n server
        with open(encrypted_file_path, 'rb') as encrypted_file:
            files = {'file': encrypted_file}
            response = requests.post(UPLOAD_URL, files=files)

            if response.status_code == 200:
                # L·∫•y key t·ª´ server n·∫øu c√≥
                key = response.json().get('key')
                if key:
                    # L∆∞u key v√†o file
                    with open("key.txt", "w") as key_file:
                        key_file.write(key)

                    # Hi·ªÉn th·ªã key trong h·ªôp tho·∫°i th√¥ng b√°o
                    custom_showinfo("Th√†nh c√¥ng", f"File ƒë√£ ƒë∆∞·ª£c m√£ h√≥a v√† t·∫£i l√™n th√†nh c√¥ng!\nKey: {key}")

                    # L∆∞u key v√†o clipboard
                    pyperclip.copy(key)

                    # Th√¥ng b√°o v·ªÅ vi·ªác ƒë√£ sao ch√©p key v√†o clipboard
                    custom_showinfo("Key ƒë√£ ƒë∆∞·ª£c sao ch√©p", "Key ƒë√£ ƒë∆∞·ª£c sao ch√©p v√†o clipboard!")
            else:
                custom_showerror("L·ªói", response.json().get('error', 'Kh√¥ng r√µ l·ªói'))
        
        # X√≥a file ƒë√£ m√£ h√≥a sau khi t·∫£i l√™n (n·∫øu kh√¥ng c·∫ßn l∆∞u)
        os.remove(encrypted_file_path)

    except Exception as e:
        custom_showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i l√™n file: {str(e)}")
        
def download_file():
    """T·∫£i xu·ªëng file ƒë√£ gi·∫£i m√£ t·ª´ server."""
    file_key = custom_askstring("Nh·∫≠p Key", "Vui l√≤ng nh·∫≠p key:")
    if not file_key:
        custom_showerror("L·ªói", "B·∫°n ch∆∞a nh·∫≠p key!")
        return

    custom_showinfo("Ch·ªçn Private Key", "Vui l√≤ng ch·ªçn file private key (PEM).")
    private_key_path = filedialog.askopenfilename(title="Ch·ªçn file private key (PEM)")
    if not private_key_path:
        custom_showerror("L·ªói", "B·∫°n ch∆∞a ch·ªçn file private key!")
        return

    try:
        with open(private_key_path, 'rb') as private_key_file:
            files = {'private_key': private_key_file}
            data = {'key': file_key}
            response = requests.post(DOWNLOAD_URL, data=data, files=files)

            if response.status_code == 200:
                content_disposition = response.headers.get('Content-Disposition', '')
                if 'filename=' in content_disposition:
                    filename = content_disposition.split('filename=')[1].strip('"')
                else:
                    filename = "downloaded_file.decrypted"

                if filename.endswith('.decrypted'):
                    filename = filename.rsplit('.decrypted', 1)[0]

                save_path = filedialog.asksaveasfilename(
                    title="L∆∞u file d∆∞·ªõi t√™n...",
                    initialfile=filename,
                    defaultextension="." + filename.split('.')[-1],
                    filetypes=[("All Files", "*.*")]
                )
                if not save_path:
                    custom_showinfo("H·ªßy", "B·∫°n ƒë√£ h·ªßy l∆∞u file.")
                    return

                with open(save_path, 'wb') as f:
                    f.write(response.content)

                custom_showinfo("Th√†nh c√¥ng", f"T·∫£i xu·ªëng file th√†nh c√¥ng!\nFile ƒë∆∞·ª£c l∆∞u t·∫°i: {save_path}")
            else:
                custom_showerror("L·ªói", response.json().get('error', 'Kh√¥ng r√µ l·ªói'))
    except Exception as e:
        custom_showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i xu·ªëng file: {str(e)}")
    
def generate_keys_ui():
    """Hi·ªÉn th·ªã giao di·ªán t·∫°o kh√≥a v·ªõi UI ƒë·∫πp, hi·ªáu ·ª©ng ƒë·ªông."""
    dialog = ctk.CTkToplevel()
    dialog.title("T·∫°o C·∫∑p Kh√≥a")
    dialog.geometry("500x340")
    dialog.resizable(False, False)
    dialog.configure(fg_color="#2C2F33")  # M√†u n·ªÅn t·ªëi
    dialog.attributes("-alpha", 0)  # Hi·ªáu ·ª©ng fade-in ban ƒë·∫ßu

    # Frame ch·ª©a n·ªôi dung
    frame = ctk.CTkFrame(dialog, fg_color="#23272A", corner_radius=12)
    frame.pack(fill="both", expand=True, padx=20, pady=20)

    # Icon kh√≥a üîë
    icon_label = ctk.CTkLabel(frame, text="üîë", font=("Arial", 50), text_color="#FFD700")
    icon_label.pack(pady=(10, 5))

    # Ti√™u ƒë·ªÅ
    title_label = ctk.CTkLabel(frame, text="T·∫°o C·∫∑p Kh√≥a RSA", font=("Arial", 16, "bold"), text_color="white")
    title_label.pack()

    # Khu v·ª±c hi·ªÉn th·ªã k·∫øt qu·∫£
    result_label = ctk.CTkLabel(frame, text="", font=("Arial", 13), text_color="lightgreen", wraplength=460)
    result_label.pack(pady=5)

    path_label = ctk.CTkLabel(frame, text="", font=("Arial", 12), text_color="#1E90FF", wraplength=460, justify="center")
    path_label.pack(pady=5)

    # H√†m x·ª≠ l√Ω khi nh·∫•n "T·∫°o Kh√≥a"
    def handle_generate_keys():
        try:
            private_key, public_key = generate_key_pair()
            private_path = os.path.abspath('private_key.pem')
            public_path = os.path.abspath('public_key.pem')

            save_private_key(private_key, private_path)
            save_public_key(public_key, public_path)

            result_label.configure(text="‚úî C·∫∑p kh√≥a ƒë√£ t·∫°o th√†nh c√¥ng!", text_color="lightgreen")
            path_label.configure(
                text=f"üìÇ Kh√≥a ri√™ng: {private_path}\nüìÇ Kh√≥a c√¥ng khai: {public_path}"
            )
        except Exception as e:
            result_label.configure(text=f"‚ùå L·ªói: {str(e)}", text_color="red")
            path_label.configure(text="")

    # N√∫t "T·∫°o Kh√≥a"
    generate_button = ctk.CTkButton(
        frame, text="T·∫°o Kh√≥a", font=("Arial", 14, "bold"), corner_radius=20,
        fg_color="#5865F2", text_color="white", hover_color="#1E90FF",
        command=handle_generate_keys
    )
    generate_button.pack(pady=10)

    # N√∫t "ƒê√≥ng"
    close_button = ctk.CTkButton(
        frame, text="ƒê√≥ng", font=("Arial", 14), corner_radius=20,
        fg_color="#FF5555", text_color="white", hover_color="#D32F2F",
        command=dialog.destroy
    )
    close_button.pack(pady=5)

    # Hi·ªáu ·ª©ng fade-in
    for i in range(0, 11):
        dialog.attributes("-alpha", i / 10)
        dialog.update_idletasks()
        dialog.after(30)

    dialog.grab_set()
    dialog.wait_window()

# T·∫°o GUI
def create_gui():
    ctk.set_appearance_mode("dark")

    # T·∫°o c·ª≠a s·ªï ch√≠nh
    root = ctk.CTk()
    root.title("·ª®ng d·ª•ng T·∫£i L√™n v√† T·∫£i Xu·ªëng File")
    root.geometry("400x300")

    # T·∫°o m·ªôt frame trung t√¢m ƒë·ªÉ ch·ª©a c√°c n√∫t
    frame = ctk.CTkFrame(root)
    frame.pack(pady=40, padx=40, fill="both", expand=True)

    button_font = ("Papyrus", 14, "bold")

    # Load icon cho t·ª´ng n√∫t
    upload_icon = ctk.CTkImage(light_image=Image.open(r"C:\Users\lenovo\Desktop\new project\PythonPJ\AtestForSecurePJ\icons\upload.png"), size=(25, 25))
    download_icon = ctk.CTkImage(light_image=Image.open(r"C:\Users\lenovo\Desktop\new project\PythonPJ\AtestForSecurePJ\icons\download.png"), size=(25, 25))
    key_icon = ctk.CTkImage(light_image=Image.open(r"C:\Users\lenovo\Desktop\new project\PythonPJ\AtestForSecurePJ\icons\key.png"), size=(25, 25))

    # T·∫°o n√∫t "T·∫£i l√™n file"
    upload_btn = ctk.CTkButton(
        frame,
        text="T·∫£i l√™n file",
        command=upload_file,
        width=200,
        height=50,
        corner_radius=20,
        fg_color="#4CAF50",
        hover_color="#388E3C",
        border_width=2,
        border_color="#FFC107",
        font=button_font,
        image=upload_icon,  # G√°n icon
        compound="left"  # Icon b√™n tr√°i ch·ªØ
    )
    upload_btn.pack(pady=10, padx=10)  # Th√™m padding ·ªü ƒë√¢y

    # T·∫°o n√∫t "T·∫£i xu·ªëng file"
    download_btn = ctk.CTkButton(
        frame,
        text="T·∫£i xu·ªëng file",
        command=download_file,
        width=200,
        height=50,
        corner_radius=20,
        fg_color="#2196F3",
        hover_color="#1976D2",
        border_width=2,
        border_color="#FF5722",
        font=button_font,
        image=download_icon,  
        compound="left"
    )
    download_btn.pack(pady=10, padx=10)

    # T·∫°o n√∫t "T·∫°o C·∫∑p Kh√≥a"
    generate_keys_btn = ctk.CTkButton(
        frame,
        text="T·∫°o C·∫∑p Kh√≥a",
        command=generate_keys_ui,  # G·ªçi h√†m giao di·ªán thay v√¨ generate_keys
        width=200,
        height=50,
        corner_radius=20,
        fg_color="#F44336",
        hover_color="#D32F2F",
        border_width=2,
        border_color="#4CAF50",
        font=button_font,
        image=key_icon,  
        compound="left"
    )
    generate_keys_btn.pack(pady=10, padx=10)
    root.mainloop()

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    create_gui()
